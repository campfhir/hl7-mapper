{"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts":{"path":"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":24}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":27}},"4":{"start":{"line":8,"column":23},"end":{"line":8,"column":38}},"5":{"start":{"line":9,"column":26},"end":{"line":9,"column":42}},"6":{"start":{"line":10,"column":8},"end":{"line":11,"column":52}},"7":{"start":{"line":11,"column":12},"end":{"line":11,"column":52}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":39}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":38}},"10":{"start":{"line":14,"column":8},"end":{"line":14,"column":45}},"11":{"start":{"line":15,"column":8},"end":{"line":15,"column":49}},"12":{"start":{"line":16,"column":8},"end":{"line":16,"column":54}},"13":{"start":{"line":17,"column":8},"end":{"line":17,"column":46}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":52}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":21}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":29}},"17":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"18":{"start":{"line":28,"column":28},"end":{"line":28,"column":43}},"19":{"start":{"line":29,"column":31},"end":{"line":29,"column":69}},"20":{"start":{"line":31,"column":36},"end":{"line":31,"column":77}},"21":{"start":{"line":33,"column":33},"end":{"line":33,"column":74}},"22":{"start":{"line":34,"column":28},"end":{"line":34,"column":88}},"23":{"start":{"line":35,"column":8},"end":{"line":35,"column":38}},"24":{"start":{"line":36,"column":8},"end":{"line":36,"column":29}},"25":{"start":{"line":39,"column":25},"end":{"line":39,"column":63}},"26":{"start":{"line":40,"column":35},"end":{"line":40,"column":70}},"27":{"start":{"line":41,"column":25},"end":{"line":41,"column":65}},"28":{"start":{"line":42,"column":25},"end":{"line":42,"column":36}},"29":{"start":{"line":44,"column":8},"end":{"line":52,"column":9}},"30":{"start":{"line":45,"column":27},"end":{"line":45,"column":44}},"31":{"start":{"line":48,"column":12},"end":{"line":49,"column":25}},"32":{"start":{"line":49,"column":16},"end":{"line":49,"column":25}},"33":{"start":{"line":51,"column":12},"end":{"line":51,"column":49}},"34":{"start":{"line":54,"column":8},"end":{"line":54,"column":48}},"35":{"start":{"line":56,"column":8},"end":{"line":56,"column":61}},"36":{"start":{"line":57,"column":8},"end":{"line":57,"column":26}},"37":{"start":{"line":60,"column":8},"end":{"line":65,"column":34}},"38":{"start":{"line":74,"column":18},"end":{"line":74,"column":20}},"39":{"start":{"line":75,"column":8},"end":{"line":136,"column":9}},"40":{"start":{"line":76,"column":26},"end":{"line":76,"column":39}},"41":{"start":{"line":77,"column":25},"end":{"line":80,"column":48}},"42":{"start":{"line":80,"column":28},"end":{"line":80,"column":47}},"43":{"start":{"line":81,"column":25},"end":{"line":81,"column":39}},"44":{"start":{"line":82,"column":12},"end":{"line":83,"column":45}},"45":{"start":{"line":83,"column":16},"end":{"line":83,"column":45}},"46":{"start":{"line":86,"column":12},"end":{"line":119,"column":13}},"47":{"start":{"line":115,"column":20},"end":{"line":115,"column":98}},"48":{"start":{"line":116,"column":20},"end":{"line":116,"column":26}},"49":{"start":{"line":118,"column":20},"end":{"line":118,"column":26}},"50":{"start":{"line":121,"column":12},"end":{"line":133,"column":13}},"51":{"start":{"line":122,"column":41},"end":{"line":122,"column":47}},"52":{"start":{"line":123,"column":28},"end":{"line":123,"column":29}},"53":{"start":{"line":124,"column":16},"end":{"line":131,"column":17}},"54":{"start":{"line":125,"column":20},"end":{"line":125,"column":63}},"55":{"start":{"line":126,"column":20},"end":{"line":129,"column":30}},"56":{"start":{"line":127,"column":36},"end":{"line":127,"column":40}},"57":{"start":{"line":129,"column":24},"end":{"line":129,"column":30}},"58":{"start":{"line":130,"column":20},"end":{"line":130,"column":38}},"59":{"start":{"line":132,"column":16},"end":{"line":132,"column":44}},"60":{"start":{"line":134,"column":12},"end":{"line":134,"column":33}},"61":{"start":{"line":135,"column":12},"end":{"line":135,"column":21}},"62":{"start":{"line":137,"column":8},"end":{"line":137,"column":19}},"63":{"start":{"line":145,"column":18},"end":{"line":145,"column":20}},"64":{"start":{"line":146,"column":8},"end":{"line":161,"column":9}},"65":{"start":{"line":146,"column":16},"end":{"line":161,"column":9}},"66":{"start":{"line":147,"column":12},"end":{"line":160,"column":13}},"67":{"start":{"line":147,"column":19},"end":{"line":160,"column":13}},"68":{"start":{"line":148,"column":33},"end":{"line":148,"column":59}},"69":{"start":{"line":149,"column":28},"end":{"line":149,"column":44}},"70":{"start":{"line":150,"column":16},"end":{"line":152,"column":17}},"71":{"start":{"line":151,"column":20},"end":{"line":151,"column":38}},"72":{"start":{"line":153,"column":37},"end":{"line":153,"column":78}},"73":{"start":{"line":154,"column":16},"end":{"line":158,"column":17}},"74":{"start":{"line":156,"column":20},"end":{"line":156,"column":65}},"75":{"start":{"line":157,"column":20},"end":{"line":157,"column":29}},"76":{"start":{"line":159,"column":16},"end":{"line":159,"column":58}},"77":{"start":{"line":162,"column":8},"end":{"line":162,"column":19}},"78":{"start":{"line":165,"column":28},"end":{"line":165,"column":30}},"79":{"start":{"line":167,"column":8},"end":{"line":199,"column":9}},"80":{"start":{"line":167,"column":17},"end":{"line":199,"column":9}},"81":{"start":{"line":168,"column":12},"end":{"line":168,"column":72}},"82":{"start":{"line":170,"column":12},"end":{"line":198,"column":13}},"83":{"start":{"line":170,"column":20},"end":{"line":198,"column":13}},"84":{"start":{"line":171,"column":16},"end":{"line":188,"column":17}},"85":{"start":{"line":173,"column":20},"end":{"line":186,"column":21}},"86":{"start":{"line":173,"column":28},"end":{"line":186,"column":21}},"87":{"start":{"line":174,"column":41},"end":{"line":174,"column":78}},"88":{"start":{"line":175,"column":24},"end":{"line":176,"column":66}},"89":{"start":{"line":176,"column":28},"end":{"line":176,"column":66}},"90":{"start":{"line":177,"column":24},"end":{"line":177,"column":85}},"91":{"start":{"line":178,"column":24},"end":{"line":182,"column":25}},"92":{"start":{"line":180,"column":28},"end":{"line":180,"column":101}},"93":{"start":{"line":181,"column":28},"end":{"line":181,"column":37}},"94":{"start":{"line":183,"column":46},"end":{"line":183,"column":87}},"95":{"start":{"line":184,"column":24},"end":{"line":184,"column":79}},"96":{"start":{"line":185,"column":24},"end":{"line":185,"column":33}},"97":{"start":{"line":187,"column":20},"end":{"line":187,"column":36}},"98":{"start":{"line":190,"column":33},"end":{"line":190,"column":69}},"99":{"start":{"line":191,"column":16},"end":{"line":191,"column":77}},"100":{"start":{"line":192,"column":16},"end":{"line":195,"column":17}},"101":{"start":{"line":193,"column":20},"end":{"line":193,"column":89}},"102":{"start":{"line":194,"column":20},"end":{"line":194,"column":29}},"103":{"start":{"line":196,"column":38},"end":{"line":196,"column":79}},"104":{"start":{"line":197,"column":16},"end":{"line":197,"column":67}},"105":{"start":{"line":200,"column":8},"end":{"line":200,"column":29}},"106":{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},"107":{"start":{"line":204,"column":12},"end":{"line":204,"column":50}},"108":{"start":{"line":208,"column":30},"end":{"line":208,"column":32}},"109":{"start":{"line":209,"column":8},"end":{"line":225,"column":9}},"110":{"start":{"line":209,"column":20},"end":{"line":225,"column":9}},"111":{"start":{"line":210,"column":24},"end":{"line":210,"column":49}},"112":{"start":{"line":211,"column":28},"end":{"line":211,"column":47}},"113":{"start":{"line":212,"column":32},"end":{"line":212,"column":75}},"114":{"start":{"line":213,"column":12},"end":{"line":216,"column":13}},"115":{"start":{"line":214,"column":16},"end":{"line":214,"column":78}},"116":{"start":{"line":215,"column":16},"end":{"line":215,"column":36}},"117":{"start":{"line":217,"column":12},"end":{"line":224,"column":13}},"118":{"start":{"line":217,"column":27},"end":{"line":224,"column":13}},"119":{"start":{"line":218,"column":35},"end":{"line":218,"column":56}},"120":{"start":{"line":219,"column":31},"end":{"line":219,"column":55}},"121":{"start":{"line":220,"column":16},"end":{"line":221,"column":48}},"122":{"start":{"line":221,"column":20},"end":{"line":221,"column":48}},"123":{"start":{"line":222,"column":16},"end":{"line":222,"column":84}},"124":{"start":{"line":223,"column":16},"end":{"line":223,"column":39}},"125":{"start":{"line":226,"column":8},"end":{"line":226,"column":31}},"126":{"start":{"line":229,"column":8},"end":{"line":231,"column":9}},"127":{"start":{"line":230,"column":12},"end":{"line":230,"column":40}},"128":{"start":{"line":234,"column":0},"end":{"line":234,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":21},"end":{"line":20,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":18},"end":{"line":23,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":14},"end":{"line":26,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":12},"end":{"line":37,"column":5}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":15},"end":{"line":58,"column":5}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":23},"end":{"line":66,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":28},"end":{"line":138,"column":5}},"line":72},"7":{"name":"(anonymous_7)","decl":{"start":{"line":80,"column":21},"end":{"line":80,"column":22}},"loc":{"start":{"line":80,"column":28},"end":{"line":80,"column":47}},"line":80},"8":{"name":"(anonymous_8)","decl":{"start":{"line":127,"column":29},"end":{"line":127,"column":30}},"loc":{"start":{"line":127,"column":36},"end":{"line":127,"column":40}},"line":127},"9":{"name":"(anonymous_9)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":38},"end":{"line":163,"column":5}},"line":144},"10":{"name":"(anonymous_10)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":31},"end":{"line":201,"column":5}},"line":164},"11":{"name":"(anonymous_11)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":60},"end":{"line":206,"column":5}},"line":202},"12":{"name":"(anonymous_12)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":41},"end":{"line":227,"column":5}},"line":207},"13":{"name":"(anonymous_13)","decl":{"start":{"line":228,"column":4},"end":{"line":228,"column":5}},"loc":{"start":{"line":228,"column":59},"end":{"line":232,"column":5}},"line":228}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":11,"column":52}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":11,"column":52}},{"start":{"line":10,"column":8},"end":{"line":11,"column":52}}],"line":10},"1":{"loc":{"start":{"line":48,"column":12},"end":{"line":49,"column":25}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":49,"column":25}},{"start":{"line":48,"column":12},"end":{"line":49,"column":25}}],"line":48},"2":{"loc":{"start":{"line":82,"column":12},"end":{"line":83,"column":45}},"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":83,"column":45}},{"start":{"line":82,"column":12},"end":{"line":83,"column":45}}],"line":82},"3":{"loc":{"start":{"line":86,"column":12},"end":{"line":119,"column":13}},"type":"switch","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":27}},{"start":{"line":88,"column":16},"end":{"line":88,"column":27}},{"start":{"line":89,"column":16},"end":{"line":89,"column":27}},{"start":{"line":90,"column":16},"end":{"line":90,"column":27}},{"start":{"line":91,"column":16},"end":{"line":91,"column":27}},{"start":{"line":92,"column":16},"end":{"line":92,"column":27}},{"start":{"line":93,"column":16},"end":{"line":93,"column":27}},{"start":{"line":94,"column":16},"end":{"line":94,"column":27}},{"start":{"line":95,"column":16},"end":{"line":95,"column":27}},{"start":{"line":96,"column":16},"end":{"line":96,"column":27}},{"start":{"line":97,"column":16},"end":{"line":97,"column":27}},{"start":{"line":98,"column":16},"end":{"line":98,"column":27}},{"start":{"line":99,"column":16},"end":{"line":99,"column":27}},{"start":{"line":100,"column":16},"end":{"line":100,"column":27}},{"start":{"line":101,"column":16},"end":{"line":101,"column":27}},{"start":{"line":102,"column":16},"end":{"line":102,"column":27}},{"start":{"line":103,"column":16},"end":{"line":103,"column":27}},{"start":{"line":104,"column":16},"end":{"line":104,"column":27}},{"start":{"line":105,"column":16},"end":{"line":105,"column":27}},{"start":{"line":106,"column":16},"end":{"line":106,"column":27}},{"start":{"line":107,"column":16},"end":{"line":107,"column":27}},{"start":{"line":108,"column":16},"end":{"line":108,"column":27}},{"start":{"line":109,"column":16},"end":{"line":109,"column":27}},{"start":{"line":110,"column":16},"end":{"line":110,"column":27}},{"start":{"line":111,"column":16},"end":{"line":111,"column":27}},{"start":{"line":112,"column":16},"end":{"line":112,"column":27}},{"start":{"line":113,"column":16},"end":{"line":116,"column":26}},{"start":{"line":117,"column":16},"end":{"line":118,"column":26}}],"line":86},"4":{"loc":{"start":{"line":115,"column":42},"end":{"line":115,"column":95}},"type":"cond-expr","locations":[{"start":{"line":115,"column":87},"end":{"line":115,"column":89}},{"start":{"line":115,"column":92},"end":{"line":115,"column":95}}],"line":115},"5":{"loc":{"start":{"line":115,"column":42},"end":{"line":115,"column":84}},"type":"binary-expr","locations":[{"start":{"line":115,"column":42},"end":{"line":115,"column":67}},{"start":{"line":115,"column":71},"end":{"line":115,"column":84}}],"line":115},"6":{"loc":{"start":{"line":121,"column":12},"end":{"line":133,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":133,"column":13}},{"start":{"line":121,"column":12},"end":{"line":133,"column":13}}],"line":121},"7":{"loc":{"start":{"line":126,"column":20},"end":{"line":129,"column":30}},"type":"if","locations":[{"start":{"line":126,"column":20},"end":{"line":129,"column":30}},{"start":{"line":126,"column":20},"end":{"line":129,"column":30}}],"line":126},"8":{"loc":{"start":{"line":150,"column":16},"end":{"line":152,"column":17}},"type":"if","locations":[{"start":{"line":150,"column":16},"end":{"line":152,"column":17}},{"start":{"line":150,"column":16},"end":{"line":152,"column":17}}],"line":150},"9":{"loc":{"start":{"line":154,"column":16},"end":{"line":158,"column":17}},"type":"if","locations":[{"start":{"line":154,"column":16},"end":{"line":158,"column":17}},{"start":{"line":154,"column":16},"end":{"line":158,"column":17}}],"line":154},"10":{"loc":{"start":{"line":171,"column":16},"end":{"line":188,"column":17}},"type":"if","locations":[{"start":{"line":171,"column":16},"end":{"line":188,"column":17}},{"start":{"line":171,"column":16},"end":{"line":188,"column":17}}],"line":171},"11":{"loc":{"start":{"line":175,"column":24},"end":{"line":176,"column":66}},"type":"if","locations":[{"start":{"line":175,"column":24},"end":{"line":176,"column":66}},{"start":{"line":175,"column":24},"end":{"line":176,"column":66}}],"line":175},"12":{"loc":{"start":{"line":178,"column":24},"end":{"line":182,"column":25}},"type":"if","locations":[{"start":{"line":178,"column":24},"end":{"line":182,"column":25}},{"start":{"line":178,"column":24},"end":{"line":182,"column":25}}],"line":178},"13":{"loc":{"start":{"line":192,"column":16},"end":{"line":195,"column":17}},"type":"if","locations":[{"start":{"line":192,"column":16},"end":{"line":195,"column":17}},{"start":{"line":192,"column":16},"end":{"line":195,"column":17}}],"line":192},"14":{"loc":{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},"type":"if","locations":[{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},{"start":{"line":203,"column":8},"end":{"line":205,"column":9}}],"line":203},"15":{"loc":{"start":{"line":213,"column":12},"end":{"line":216,"column":13}},"type":"if","locations":[{"start":{"line":213,"column":12},"end":{"line":216,"column":13}},{"start":{"line":213,"column":12},"end":{"line":216,"column":13}}],"line":213},"16":{"loc":{"start":{"line":220,"column":16},"end":{"line":221,"column":48}},"type":"if","locations":[{"start":{"line":220,"column":16},"end":{"line":221,"column":48}},{"start":{"line":220,"column":16},"end":{"line":221,"column":48}}],"line":220},"17":{"loc":{"start":{"line":229,"column":8},"end":{"line":231,"column":9}},"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":231,"column":9}},{"start":{"line":229,"column":8},"end":{"line":231,"column":9}}],"line":229}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":4,"17":0,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":11,"31":11,"32":1,"33":10,"34":1,"35":1,"36":1,"37":502,"38":2,"39":2,"40":26,"41":26,"42":458,"43":26,"44":26,"45":0,"46":26,"47":23,"48":23,"49":3,"50":26,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":26,"61":26,"62":2,"63":2,"64":2,"65":2,"66":26,"67":26,"68":432,"69":432,"70":432,"71":26,"72":432,"73":432,"74":429,"75":429,"76":3,"77":2,"78":2,"79":2,"80":2,"81":26,"82":26,"83":26,"84":432,"85":3,"86":3,"87":6,"88":6,"89":3,"90":6,"91":6,"92":3,"93":3,"94":3,"95":3,"96":3,"97":3,"98":429,"99":429,"100":429,"101":392,"102":392,"103":37,"104":37,"105":2,"106":435,"107":429,"108":40,"109":40,"110":40,"111":107,"112":107,"113":107,"114":107,"115":107,"116":107,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":40,"126":26,"127":26,"128":1},"f":{"0":1,"1":4,"2":0,"3":1,"4":1,"5":502,"6":2,"7":458,"8":0,"9":2,"10":2,"11":435,"12":40,"13":26},"b":{"0":[0,1],"1":[1,10],"2":[0,26],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,21,22,22,23,23,23,23,23,23,3],"4":[23,0],"5":[23,23],"6":[0,26],"7":[0,0],"8":[26,406],"9":[429,3],"10":[3,429],"11":[3,3],"12":[3,3],"13":[392,37],"14":[429,6],"15":[107,0],"16":[0,0],"17":[26,0]},"inputSourceMap":{"version":3,"file":"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts","sources":["/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["type MessageNode = { [segment: string]: string[] };\ntype MessageWithFieldNode = {\n  [segment: string]: {\n    [field: string]: string | string[];\n  };\n};\nexport type FieldComponent = {\n  [component: string]:\n    | string\n    | {\n        [sub: string]: string;\n      };\n};\n\nexport type MessageWithFieldAndComponentNode = {\n  [segment: string]: {\n    [field: string]: string | FieldComponent[] | FieldComponent;\n  };\n};\n\nexport class HL7v2Message {\n  private readonly fieldDelimiter: string;\n  private readonly componentDelimiter: string;\n  private readonly repeatingFieldDelimiter: string;\n  private readonly escapeCharacter: string;\n  private readonly subComponentDelimiter: string;\n  private readonly MSH_SEGMENT: string;\n  private readonly DATA_SEGMENTS: string[];\n\n  private _message: MessageWithFieldAndComponentNode;\n  private _raw: string;\n\n  get message() {\n    return this._message;\n  }\n\n  get raw() {\n    return this._raw;\n  }\n\n  constructor(raw: string) {\n    this._raw = raw;\n    this._message = {};\n    let segments = raw.split(\"\\r\");\n    let MSH_SEGMENT = segments.shift();\n    if (!MSH_SEGMENT) throw new Error(\"MSH Segment is Falsy\");\n    this.MSH_SEGMENT = MSH_SEGMENT;\n    this.DATA_SEGMENTS = segments;\n    this.fieldDelimiter = MSH_SEGMENT[3];\n    this.componentDelimiter = MSH_SEGMENT[4];\n    this.repeatingFieldDelimiter = MSH_SEGMENT[5];\n    this.escapeCharacter = MSH_SEGMENT[6];\n    this.subComponentDelimiter = MSH_SEGMENT[7];\n    this.parse();\n  }\n\n  private parse() {\n    const MSH_SEGMENT = this.parseMSH();\n    const parsedSegments = this.parseSegments(this.DATA_SEGMENTS);\n    //this.segmentsParsed = parsedSegments;\n    const parsedRepeatedField = this.parseRepeatingFields(parsedSegments);\n    //this.repeatedParsed = parsedRepeatedField;\n\n    const parsedComponents = this.parseComponents(parsedRepeatedField);\n    let parsedMessage: MessageWithFieldAndComponentNode = {\n      MSH: MSH_SEGMENT[\"MSH\"],\n      ...parsedComponents,\n    };\n    this._message = parsedMessage;\n    return this._message;\n  }\n\n  private parseMSH() {\n    const segments = this.parseSegments([this.MSH_SEGMENT]);\n\n    const parseRepeatedField = this.parseRepeatingFields(segments);\n\n    let components = this.parseComponents(parseRepeatedField);\n    let mshSegment: { MSH: { [field: number]: any } } = { MSH: {} };\n    // re-write keys field because the parsing will be incorrect;\n    for (let [key, field] of Object.entries(components[\"MSH\"])) {\n      let fieldKey = parseInt(key, 10);\n      // the Encoding characters and Field separator don't map correctly with the parsing logic so we will\n      // manually correct those;\n      if (fieldKey < 2) continue;\n      // increment key value by 1 since HL7 fields are 1-based\n      mshSegment.MSH[fieldKey + 1] = field;\n    }\n    // set the first field in MSH to the field delimiter\n    mshSegment.MSH[1] = this.fieldDelimiter;\n    // this contains the escape characters\n    mshSegment.MSH[2] = this.MSH_SEGMENT.substring(4, 8);\n    return mshSegment;\n  }\n\n  private replaceEscape(str: string): string {\n    return str\n      .replace(\"\\\\F\", \"|\")\n      .replace(\"\\\\R\", \"~\")\n      .replace(\"\\\\S\", \"^\")\n      .replace(\"\\\\T\", \"&\")\n      .replace(\"\\\\E\", \"\\\\\");\n  }\n\n  /**\n   *\n   * @param segments Array of Segments\n   * @returns an object with headers as keys and values of fields\n   */\n  private parseSegments(segments: string[]): MessageNode {\n    let obj: MessageNode = {};\n    for (let ind in segments) {\n      let segment = segments[ind];\n      let fields = segment\n        .split(this.fieldDelimiter)\n        // remove any line feed\n        .map((v) => v.replace(/\\n/, \"\"));\n      let header = fields.shift();\n      if (!header) throw new Error(\"No Header\");\n      // some segments can appear multiple times so we append the Sequence Field\n      // PV1.1 when parsing into a JSON object\n      switch (header) {\n        case \"AIG\":\n        case \"AIL\":\n        case \"AIP\":\n        case \"AIS\":\n        case \"AL1\":\n        case \"CM0\":\n        case \"CM1\":\n        case \"CM2\":\n        case \"DB1\":\n        case \"DG1\":\n        case \"DSP\":\n        case \"FT1\":\n        case \"GT1\":\n        case \"IN1\":\n        case \"IN3\":\n        case \"NK1\":\n        case \"NTE\":\n        case \"OBR\":\n        case \"OBX\":\n        case \"PID\":\n        case \"PR1\":\n        case \"PV1\":\n        case \"RGS\":\n        case \"RQD\":\n        case \"TXA\":\n        case \"UB1\":\n        case \"UB2\":\n          // set based on sequence field or if omitted set to 1;\n          header = `${header}.${fields[0] ?? \"1\"}`;\n          break;\n        default:\n          break;\n      }\n      // in the event the header already already exists will append [index] 1-based\n      if (obj[header]) {\n        let incrementingHeader = header;\n        let index = 1;\n        while (true) {\n          incrementingHeader = `${header}[${index}]`;\n\n          if (\n            !Object.entries(obj)\n              .map((v) => v[0])\n              .includes(incrementingHeader)\n          )\n            break;\n          index = index + 1;\n        }\n        header = incrementingHeader;\n      }\n      obj[header] = fields;\n      continue;\n    }\n    return obj;\n  }\n\n  /**\n   * Parses over messages that have repeating fields and\n   * @param messageNode The message node to parse over it's keys\n   * @returns\n   */\n  private parseRepeatingFields(messageNode: MessageNode): MessageWithFieldNode {\n    let obj: MessageWithFieldNode = {};\n    fields: for (let [segment, fields] of Object.entries(messageNode)) {\n      field: for (let fieldInd in fields) {\n        let fieldIndex = parseInt(fieldInd, 10) + 1;\n        let field = fields[fieldInd];\n        if (!obj[segment]) {\n          obj[segment] = {};\n        }\n        let repeatedFields = field.split(this.repeatingFieldDelimiter);\n        if (repeatedFields.length <= 1) {\n          // No repeating fields\n          obj[segment][fieldIndex] = repeatedFields[0];\n          continue;\n        }\n\n        obj[segment][fieldIndex] = repeatedFields;\n      }\n    }\n    return obj;\n  }\n\n  parseComponents(\n    fieldNode: MessageWithFieldNode\n  ): MessageWithFieldAndComponentNode {\n    let componentNode: MessageWithFieldAndComponentNode = {};\n    // * iterate through the segments\n    segment: for (let [segment, fields] of Object.entries(fieldNode)) {\n      this.initializeComponentNodeSegment(componentNode, segment);\n      // * iterate through the fields\n      fields: for (let [outerInd, field] of Object.entries(fields)) {\n        if (typeof field !== \"string\") {\n          // * field is an array, which should be a repeated field\n          repeat: for (let [_ind, repeat] of Object.entries(field)) {\n            let components = repeat.split(this.componentDelimiter);\n            if (!Array.isArray(componentNode[segment][outerInd]))\n              componentNode[segment][outerInd] = [];\n            this.initializeFieldObject(componentNode, segment, outerInd);\n            if (components.length <= 1) {\n              // There is only 1 item so we create the string and index the property based on the repeated field\n              (\n                componentNode[segment][outerInd] as (FieldComponent | string)[]\n              ).push(this.replaceEscape(components[0]));\n              continue;\n            }\n            let componentObject = this.toComplexComponentObject(components);\n\n            (componentNode[segment][outerInd] as FieldComponent[]).push(\n              componentObject\n            );\n\n            continue;\n          }\n          continue fields;\n        }\n\n        // field is a string\n        let components = field.split(this.componentDelimiter);\n        this.initializeFieldObject(componentNode, segment, outerInd);\n\n        if (components.length <= 1) {\n          componentNode[segment][outerInd] = this.replaceEscape(components[0]);\n          continue;\n        }\n        let componentObject = this.toComplexComponentObject(components);\n        componentNode[segment][outerInd] = componentObject;\n      }\n    }\n    return componentNode;\n  }\n\n  private initializeFieldObject(\n    componentNode: MessageWithFieldAndComponentNode,\n    segment: string,\n    outerInd: string\n  ) {\n    if (!componentNode[segment][outerInd]) {\n      componentNode[segment][outerInd] = {};\n    }\n  }\n\n  private toComplexComponentObject(components: string[]) {\n    let componentObject: any = {};\n    components: for (let compInd in components) {\n      let index = parseInt(compInd, 10) + 1;\n      let component = components[compInd];\n      let subComponents = component.split(this.subComponentDelimiter);\n      if (subComponents.length <= 1) {\n        componentObject[index] = this.replaceEscape(subComponents[0]);\n        continue components;\n      }\n\n      subComponents: for (let subInd in subComponents) {\n        let subComponent = subComponents[subInd];\n        let subIndex = parseInt(subInd, 10) + 1;\n        if (!componentObject[index]) componentObject[index] = {};\n        componentObject[index][subIndex] = this.replaceEscape(subComponent);\n        continue subComponents;\n      }\n    }\n    return componentObject;\n  }\n\n  private initializeComponentNodeSegment(\n    componentNode: MessageWithFieldAndComponentNode,\n    segment: string\n  ) {\n    if (!componentNode[segment]) {\n      componentNode[segment] = {};\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e07deb1e85a046f4ab64adad35ea25a42283c94c","contentHash":"18e244b61ab11e79716645cbd4bd769f9441eebfa07ee1103dee77ef1dc3f089"}}