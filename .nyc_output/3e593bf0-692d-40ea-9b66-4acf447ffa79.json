{"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts":{"path":"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":23}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":26}},"7":{"start":{"line":12,"column":23},"end":{"line":12,"column":38}},"8":{"start":{"line":13,"column":26},"end":{"line":13,"column":42}},"9":{"start":{"line":14,"column":8},"end":{"line":15,"column":52}},"10":{"start":{"line":15,"column":12},"end":{"line":15,"column":52}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":39}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":38}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":45}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":49}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":54}},"16":{"start":{"line":21,"column":8},"end":{"line":21,"column":46}},"17":{"start":{"line":22,"column":8},"end":{"line":22,"column":52}},"18":{"start":{"line":23,"column":8},"end":{"line":23,"column":21}},"19":{"start":{"line":26,"column":8},"end":{"line":26,"column":60}},"20":{"start":{"line":29,"column":28},"end":{"line":29,"column":43}},"21":{"start":{"line":30,"column":31},"end":{"line":30,"column":69}},"22":{"start":{"line":32,"column":36},"end":{"line":32,"column":77}},"23":{"start":{"line":34,"column":28},"end":{"line":36,"column":9}},"24":{"start":{"line":37,"column":33},"end":{"line":37,"column":74}},"25":{"start":{"line":38,"column":8},"end":{"line":38,"column":89}},"26":{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},"27":{"start":{"line":42,"column":25},"end":{"line":42,"column":63}},"28":{"start":{"line":43,"column":35},"end":{"line":43,"column":70}},"29":{"start":{"line":44,"column":25},"end":{"line":44,"column":65}},"30":{"start":{"line":46,"column":8},"end":{"line":46,"column":64}},"31":{"start":{"line":47,"column":8},"end":{"line":47,"column":26}},"32":{"start":{"line":50,"column":8},"end":{"line":55,"column":34}},"33":{"start":{"line":64,"column":18},"end":{"line":64,"column":20}},"34":{"start":{"line":65,"column":8},"end":{"line":126,"column":9}},"35":{"start":{"line":66,"column":26},"end":{"line":66,"column":39}},"36":{"start":{"line":67,"column":25},"end":{"line":70,"column":48}},"37":{"start":{"line":70,"column":28},"end":{"line":70,"column":47}},"38":{"start":{"line":71,"column":25},"end":{"line":71,"column":39}},"39":{"start":{"line":72,"column":12},"end":{"line":73,"column":45}},"40":{"start":{"line":73,"column":16},"end":{"line":73,"column":45}},"41":{"start":{"line":76,"column":12},"end":{"line":109,"column":13}},"42":{"start":{"line":105,"column":20},"end":{"line":105,"column":98}},"43":{"start":{"line":106,"column":20},"end":{"line":106,"column":26}},"44":{"start":{"line":108,"column":20},"end":{"line":108,"column":26}},"45":{"start":{"line":111,"column":12},"end":{"line":123,"column":13}},"46":{"start":{"line":112,"column":41},"end":{"line":112,"column":47}},"47":{"start":{"line":113,"column":28},"end":{"line":113,"column":29}},"48":{"start":{"line":114,"column":16},"end":{"line":121,"column":17}},"49":{"start":{"line":115,"column":20},"end":{"line":115,"column":63}},"50":{"start":{"line":116,"column":20},"end":{"line":119,"column":30}},"51":{"start":{"line":117,"column":36},"end":{"line":117,"column":40}},"52":{"start":{"line":119,"column":24},"end":{"line":119,"column":30}},"53":{"start":{"line":120,"column":20},"end":{"line":120,"column":38}},"54":{"start":{"line":122,"column":16},"end":{"line":122,"column":44}},"55":{"start":{"line":124,"column":12},"end":{"line":124,"column":33}},"56":{"start":{"line":125,"column":12},"end":{"line":125,"column":21}},"57":{"start":{"line":127,"column":8},"end":{"line":127,"column":19}},"58":{"start":{"line":135,"column":18},"end":{"line":135,"column":20}},"59":{"start":{"line":136,"column":8},"end":{"line":157,"column":9}},"60":{"start":{"line":136,"column":16},"end":{"line":157,"column":9}},"61":{"start":{"line":137,"column":12},"end":{"line":156,"column":13}},"62":{"start":{"line":137,"column":19},"end":{"line":156,"column":13}},"63":{"start":{"line":138,"column":33},"end":{"line":138,"column":59}},"64":{"start":{"line":139,"column":28},"end":{"line":139,"column":44}},"65":{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},"66":{"start":{"line":141,"column":20},"end":{"line":141,"column":38}},"67":{"start":{"line":143,"column":37},"end":{"line":143,"column":78}},"68":{"start":{"line":144,"column":16},"end":{"line":148,"column":17}},"69":{"start":{"line":146,"column":20},"end":{"line":146,"column":65}},"70":{"start":{"line":147,"column":20},"end":{"line":147,"column":29}},"71":{"start":{"line":149,"column":37},"end":{"line":149,"column":39}},"72":{"start":{"line":150,"column":16},"end":{"line":154,"column":17}},"73":{"start":{"line":151,"column":32},"end":{"line":151,"column":59}},"74":{"start":{"line":152,"column":37},"end":{"line":152,"column":62}},"75":{"start":{"line":153,"column":20},"end":{"line":153,"column":55}},"76":{"start":{"line":155,"column":16},"end":{"line":155,"column":58}},"77":{"start":{"line":158,"column":8},"end":{"line":158,"column":19}},"78":{"start":{"line":161,"column":28},"end":{"line":161,"column":30}},"79":{"start":{"line":163,"column":8},"end":{"line":204,"column":9}},"80":{"start":{"line":163,"column":17},"end":{"line":204,"column":9}},"81":{"start":{"line":164,"column":12},"end":{"line":164,"column":72}},"82":{"start":{"line":165,"column":12},"end":{"line":168,"column":13}},"83":{"start":{"line":166,"column":16},"end":{"line":166,"column":48}},"84":{"start":{"line":167,"column":16},"end":{"line":167,"column":25}},"85":{"start":{"line":169,"column":12},"end":{"line":203,"column":13}},"86":{"start":{"line":169,"column":20},"end":{"line":203,"column":13}},"87":{"start":{"line":170,"column":16},"end":{"line":193,"column":17}},"88":{"start":{"line":171,"column":20},"end":{"line":191,"column":21}},"89":{"start":{"line":171,"column":28},"end":{"line":191,"column":21}},"90":{"start":{"line":172,"column":41},"end":{"line":172,"column":78}},"91":{"start":{"line":173,"column":24},"end":{"line":173,"column":85}},"92":{"start":{"line":174,"column":24},"end":{"line":182,"column":25}},"93":{"start":{"line":175,"column":28},"end":{"line":179,"column":29}},"94":{"start":{"line":177,"column":32},"end":{"line":177,"column":106}},"95":{"start":{"line":178,"column":32},"end":{"line":178,"column":41}},"96":{"start":{"line":180,"column":28},"end":{"line":180,"column":97}},"97":{"start":{"line":181,"column":28},"end":{"line":181,"column":37}},"98":{"start":{"line":183,"column":46},"end":{"line":183,"column":87}},"99":{"start":{"line":184,"column":24},"end":{"line":188,"column":25}},"100":{"start":{"line":186,"column":28},"end":{"line":186,"column":84}},"101":{"start":{"line":187,"column":28},"end":{"line":187,"column":37}},"102":{"start":{"line":189,"column":24},"end":{"line":189,"column":75}},"103":{"start":{"line":190,"column":24},"end":{"line":190,"column":33}},"104":{"start":{"line":192,"column":20},"end":{"line":192,"column":36}},"105":{"start":{"line":195,"column":33},"end":{"line":195,"column":69}},"106":{"start":{"line":196,"column":16},"end":{"line":196,"column":77}},"107":{"start":{"line":197,"column":16},"end":{"line":200,"column":17}},"108":{"start":{"line":198,"column":20},"end":{"line":198,"column":89}},"109":{"start":{"line":199,"column":20},"end":{"line":199,"column":29}},"110":{"start":{"line":201,"column":38},"end":{"line":201,"column":79}},"111":{"start":{"line":202,"column":16},"end":{"line":202,"column":67}},"112":{"start":{"line":205,"column":8},"end":{"line":205,"column":29}},"113":{"start":{"line":208,"column":8},"end":{"line":210,"column":9}},"114":{"start":{"line":209,"column":12},"end":{"line":209,"column":50}},"115":{"start":{"line":213,"column":30},"end":{"line":213,"column":32}},"116":{"start":{"line":214,"column":8},"end":{"line":230,"column":9}},"117":{"start":{"line":214,"column":20},"end":{"line":230,"column":9}},"118":{"start":{"line":215,"column":24},"end":{"line":215,"column":49}},"119":{"start":{"line":216,"column":28},"end":{"line":216,"column":47}},"120":{"start":{"line":217,"column":32},"end":{"line":217,"column":75}},"121":{"start":{"line":218,"column":12},"end":{"line":221,"column":13}},"122":{"start":{"line":219,"column":16},"end":{"line":219,"column":78}},"123":{"start":{"line":220,"column":16},"end":{"line":220,"column":36}},"124":{"start":{"line":222,"column":12},"end":{"line":229,"column":13}},"125":{"start":{"line":222,"column":27},"end":{"line":229,"column":13}},"126":{"start":{"line":223,"column":35},"end":{"line":223,"column":56}},"127":{"start":{"line":224,"column":31},"end":{"line":224,"column":55}},"128":{"start":{"line":225,"column":16},"end":{"line":226,"column":48}},"129":{"start":{"line":226,"column":20},"end":{"line":226,"column":48}},"130":{"start":{"line":227,"column":16},"end":{"line":227,"column":84}},"131":{"start":{"line":228,"column":16},"end":{"line":228,"column":39}},"132":{"start":{"line":231,"column":8},"end":{"line":231,"column":31}},"133":{"start":{"line":234,"column":8},"end":{"line":236,"column":9}},"134":{"start":{"line":235,"column":12},"end":{"line":235,"column":40}},"135":{"start":{"line":239,"column":0},"end":{"line":239,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":21},"end":{"line":24,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":14},"end":{"line":27,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":12},"end":{"line":40,"column":5}},"line":28},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":15},"end":{"line":48,"column":5}},"line":41},"5":{"name":"(anonymous_5)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":23},"end":{"line":56,"column":5}},"line":49},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":28},"end":{"line":128,"column":5}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":70,"column":21},"end":{"line":70,"column":22}},"loc":{"start":{"line":70,"column":28},"end":{"line":70,"column":47}},"line":70},"8":{"name":"(anonymous_8)","decl":{"start":{"line":117,"column":29},"end":{"line":117,"column":30}},"loc":{"start":{"line":117,"column":36},"end":{"line":117,"column":40}},"line":117},"9":{"name":"(anonymous_9)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":38},"end":{"line":159,"column":5}},"line":134},"10":{"name":"(anonymous_10)","decl":{"start":{"line":160,"column":4},"end":{"line":160,"column":5}},"loc":{"start":{"line":160,"column":31},"end":{"line":206,"column":5}},"line":160},"11":{"name":"(anonymous_11)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":60},"end":{"line":211,"column":5}},"line":207},"12":{"name":"(anonymous_12)","decl":{"start":{"line":212,"column":4},"end":{"line":212,"column":5}},"loc":{"start":{"line":212,"column":41},"end":{"line":232,"column":5}},"line":212},"13":{"name":"(anonymous_13)","decl":{"start":{"line":233,"column":4},"end":{"line":233,"column":5}},"loc":{"start":{"line":233,"column":59},"end":{"line":237,"column":5}},"line":233}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":8},"end":{"line":15,"column":52}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":15,"column":52}},{"start":{"line":14,"column":8},"end":{"line":15,"column":52}}],"line":14},"4":{"loc":{"start":{"line":72,"column":12},"end":{"line":73,"column":45}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":73,"column":45}},{"start":{"line":72,"column":12},"end":{"line":73,"column":45}}],"line":72},"5":{"loc":{"start":{"line":76,"column":12},"end":{"line":109,"column":13}},"type":"switch","locations":[{"start":{"line":77,"column":16},"end":{"line":77,"column":27}},{"start":{"line":78,"column":16},"end":{"line":78,"column":27}},{"start":{"line":79,"column":16},"end":{"line":79,"column":27}},{"start":{"line":80,"column":16},"end":{"line":80,"column":27}},{"start":{"line":81,"column":16},"end":{"line":81,"column":27}},{"start":{"line":82,"column":16},"end":{"line":82,"column":27}},{"start":{"line":83,"column":16},"end":{"line":83,"column":27}},{"start":{"line":84,"column":16},"end":{"line":84,"column":27}},{"start":{"line":85,"column":16},"end":{"line":85,"column":27}},{"start":{"line":86,"column":16},"end":{"line":86,"column":27}},{"start":{"line":87,"column":16},"end":{"line":87,"column":27}},{"start":{"line":88,"column":16},"end":{"line":88,"column":27}},{"start":{"line":89,"column":16},"end":{"line":89,"column":27}},{"start":{"line":90,"column":16},"end":{"line":90,"column":27}},{"start":{"line":91,"column":16},"end":{"line":91,"column":27}},{"start":{"line":92,"column":16},"end":{"line":92,"column":27}},{"start":{"line":93,"column":16},"end":{"line":93,"column":27}},{"start":{"line":94,"column":16},"end":{"line":94,"column":27}},{"start":{"line":95,"column":16},"end":{"line":95,"column":27}},{"start":{"line":96,"column":16},"end":{"line":96,"column":27}},{"start":{"line":97,"column":16},"end":{"line":97,"column":27}},{"start":{"line":98,"column":16},"end":{"line":98,"column":27}},{"start":{"line":99,"column":16},"end":{"line":99,"column":27}},{"start":{"line":100,"column":16},"end":{"line":100,"column":27}},{"start":{"line":101,"column":16},"end":{"line":101,"column":27}},{"start":{"line":102,"column":16},"end":{"line":102,"column":27}},{"start":{"line":103,"column":16},"end":{"line":106,"column":26}},{"start":{"line":107,"column":16},"end":{"line":108,"column":26}}],"line":76},"6":{"loc":{"start":{"line":105,"column":42},"end":{"line":105,"column":95}},"type":"cond-expr","locations":[{"start":{"line":105,"column":87},"end":{"line":105,"column":89}},{"start":{"line":105,"column":92},"end":{"line":105,"column":95}}],"line":105},"7":{"loc":{"start":{"line":105,"column":42},"end":{"line":105,"column":84}},"type":"binary-expr","locations":[{"start":{"line":105,"column":42},"end":{"line":105,"column":67}},{"start":{"line":105,"column":71},"end":{"line":105,"column":84}}],"line":105},"8":{"loc":{"start":{"line":111,"column":12},"end":{"line":123,"column":13}},"type":"if","locations":[{"start":{"line":111,"column":12},"end":{"line":123,"column":13}},{"start":{"line":111,"column":12},"end":{"line":123,"column":13}}],"line":111},"9":{"loc":{"start":{"line":116,"column":20},"end":{"line":119,"column":30}},"type":"if","locations":[{"start":{"line":116,"column":20},"end":{"line":119,"column":30}},{"start":{"line":116,"column":20},"end":{"line":119,"column":30}}],"line":116},"10":{"loc":{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":142,"column":17}},{"start":{"line":140,"column":16},"end":{"line":142,"column":17}}],"line":140},"11":{"loc":{"start":{"line":144,"column":16},"end":{"line":148,"column":17}},"type":"if","locations":[{"start":{"line":144,"column":16},"end":{"line":148,"column":17}},{"start":{"line":144,"column":16},"end":{"line":148,"column":17}}],"line":144},"12":{"loc":{"start":{"line":165,"column":12},"end":{"line":168,"column":13}},"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":168,"column":13}},{"start":{"line":165,"column":12},"end":{"line":168,"column":13}}],"line":165},"13":{"loc":{"start":{"line":170,"column":16},"end":{"line":193,"column":17}},"type":"if","locations":[{"start":{"line":170,"column":16},"end":{"line":193,"column":17}},{"start":{"line":170,"column":16},"end":{"line":193,"column":17}}],"line":170},"14":{"loc":{"start":{"line":174,"column":24},"end":{"line":182,"column":25}},"type":"if","locations":[{"start":{"line":174,"column":24},"end":{"line":182,"column":25}},{"start":{"line":174,"column":24},"end":{"line":182,"column":25}}],"line":174},"15":{"loc":{"start":{"line":175,"column":28},"end":{"line":179,"column":29}},"type":"if","locations":[{"start":{"line":175,"column":28},"end":{"line":179,"column":29}},{"start":{"line":175,"column":28},"end":{"line":179,"column":29}}],"line":175},"16":{"loc":{"start":{"line":184,"column":24},"end":{"line":188,"column":25}},"type":"if","locations":[{"start":{"line":184,"column":24},"end":{"line":188,"column":25}},{"start":{"line":184,"column":24},"end":{"line":188,"column":25}}],"line":184},"17":{"loc":{"start":{"line":197,"column":16},"end":{"line":200,"column":17}},"type":"if","locations":[{"start":{"line":197,"column":16},"end":{"line":200,"column":17}},{"start":{"line":197,"column":16},"end":{"line":200,"column":17}}],"line":197},"18":{"loc":{"start":{"line":208,"column":8},"end":{"line":210,"column":9}},"type":"if","locations":[{"start":{"line":208,"column":8},"end":{"line":210,"column":9}},{"start":{"line":208,"column":8},"end":{"line":210,"column":9}}],"line":208},"19":{"loc":{"start":{"line":218,"column":12},"end":{"line":221,"column":13}},"type":"if","locations":[{"start":{"line":218,"column":12},"end":{"line":221,"column":13}},{"start":{"line":218,"column":12},"end":{"line":221,"column":13}}],"line":218},"20":{"loc":{"start":{"line":225,"column":16},"end":{"line":226,"column":48}},"type":"if","locations":[{"start":{"line":225,"column":16},"end":{"line":226,"column":48}},{"start":{"line":225,"column":16},"end":{"line":226,"column":48}}],"line":225},"21":{"loc":{"start":{"line":234,"column":8},"end":{"line":236,"column":9}},"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":236,"column":9}},{"start":{"line":234,"column":8},"end":{"line":236,"column":9}}],"line":234}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":1002,"33":4,"34":4,"35":52,"36":52,"37":916,"38":52,"39":52,"40":0,"41":52,"42":46,"43":46,"44":6,"45":52,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":52,"56":52,"57":4,"58":4,"59":4,"60":4,"61":52,"62":52,"63":864,"64":864,"65":864,"66":52,"67":864,"68":864,"69":860,"70":860,"71":4,"72":4,"73":8,"74":8,"75":8,"76":4,"77":4,"78":4,"79":4,"80":4,"81":52,"82":52,"83":0,"84":0,"85":52,"86":52,"87":864,"88":4,"89":4,"90":8,"91":8,"92":8,"93":2,"94":2,"95":2,"96":0,"97":0,"98":6,"99":6,"100":6,"101":6,"102":0,"103":0,"104":4,"105":860,"106":860,"107":860,"108":786,"109":786,"110":74,"111":74,"112":4,"113":868,"114":864,"115":80,"116":80,"117":80,"118":214,"119":214,"120":214,"121":214,"122":214,"123":214,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":80,"133":52,"134":52,"135":1},"f":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":1002,"6":4,"7":916,"8":0,"9":4,"10":4,"11":868,"12":80,"13":52},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,1],"4":[0,52],"5":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,42,44,44,46,46,46,46,46,46,6],"6":[46,0],"7":[46,46],"8":[0,52],"9":[0,0],"10":[52,812],"11":[860,4],"12":[0,52],"13":[4,860],"14":[2,6],"15":[2,0],"16":[6,0],"17":[786,74],"18":[864,4],"19":[214,0],"20":[0,0],"21":[52,0]},"inputSourceMap":{"version":3,"file":"/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts","sources":["/Users/scotteremiaroden/Projects/FHIR Utilities/hl7-to-fhir-mapper/src/index.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA0B;AA0B1B,MAAa,YAAY;IAavB,YAAY,GAAW;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,WAAW,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC1D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,GAAG,CAAC,IAAY;QACd,OAAO,kBAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,KAAK;QACH,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9D,uCAAuC;QACvC,MAAM,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;QACtE,4CAA4C;QAC5C,IAAI,aAAa,GAAqC;YACpD,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC;SACxB,CAAC;QACF,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QAEnE,IAAI,CAAC,OAAO,mCAAQ,aAAa,GAAK,gBAAgB,CAAE,CAAC;QACzD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,QAAQ;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1D,6DAA6D;QAC7D,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,aAAa,CAAC,GAAW;QAC/B,OAAO,GAAG;aACP,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;aACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;aACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;aACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;aACnB,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACK,aAAa,CAAC,QAAkB;;QACtC,IAAI,GAAG,GAAgB,EAAE,CAAC;QAC1B,KAAK,IAAI,GAAG,IAAI,QAAQ,EAAE;YACxB,IAAI,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,MAAM,GAAG,OAAO;iBACjB,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC;gBAC3B,uBAAuB;iBACtB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YACnC,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YAC5B,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YAC1C,0EAA0E;YAC1E,wCAAwC;YACxC,QAAQ,MAAM,EAAE;gBACd,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK;oBACR,sDAAsD;oBACtD,MAAM,GAAG,GAAG,MAAM,IAAI,MAAA,MAAM,CAAC,CAAC,CAAC,mCAAI,GAAG,EAAE,CAAC;oBACzC,MAAM;gBACR;oBACE,MAAM;aACT;YACD,6EAA6E;YAC7E,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE;gBACf,IAAI,kBAAkB,GAAG,MAAM,CAAC;gBAChC,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,OAAO,IAAI,EAAE;oBACX,kBAAkB,GAAG,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC;oBAE3C,IACE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;yBACjB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAChB,QAAQ,CAAC,kBAAkB,CAAC;wBAE/B,MAAM;oBACR,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;iBACnB;gBACD,MAAM,GAAG,kBAAkB,CAAC;aAC7B;YACD,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;YACrB,SAAS;SACV;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACK,oBAAoB,CAAC,WAAwB;QACnD,IAAI,GAAG,GAAyB,EAAE,CAAC;QACnC,MAAM,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YACjE,KAAK,EAAE,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;gBAClC,IAAI,UAAU,GAAG,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBAC5C,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC7B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;oBACjB,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;iBACnB;gBACD,IAAI,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;oBAC9B,sBAAsB;oBACtB,GAAG,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;oBAC7C,SAAS;iBACV;gBACD,IAAI,cAAc,GAA8B,EAAE,CAAC;gBACnD,KAAK,IAAI,SAAS,IAAI,cAAc,EAAE;oBACpC,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAI,UAAU,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;oBAE3C,cAAc,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;iBACpC;gBAED,GAAG,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;aAC3C;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,eAAe,CACb,SAA+B;QAE/B,IAAI,aAAa,GAAqC,EAAE,CAAC;QACzD,+BAA+B;QAC/B,OAAO,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAChE,IAAI,CAAC,8BAA8B,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAC5D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAC9B,aAAa,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;gBAChC,SAAS;aACV;YACD,MAAM,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC5D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,MAAM,EAAE,KAAK,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACvD,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;wBACvD,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;wBAC7D,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;4BAC1B,IAAI,GAAG,EAAE;gCACP,aAAa;gCACb,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CACxD,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;gCACF,SAAS;6BACV;4BACD,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,CACnD,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;4BAEF,SAAS;yBACV;wBACD,IAAI,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;wBAEhE,IAAI,GAAG,EAAE;4BACP,aAAa;4BACb,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;4BACxD,SAAS;yBACV;wBACD,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;wBACnD,SAAS;qBACV;oBACD,SAAS,MAAM,CAAC;iBACjB;gBAED,oBAAoB;gBACpB,IAAI,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBACtD,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAC7D,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;oBAC1B,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,SAAS;iBACV;gBACD,IAAI,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;gBAChE,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;aACpD;SACF;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,qBAAqB,CAC3B,aAA+C,EAC/C,OAAe,EACf,QAAgB;QAEhB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE;YACrC,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;SACvC;IACH,CAAC;IAEO,wBAAwB,CAAC,UAAoB;QACnD,IAAI,eAAe,GAAQ,EAAE,CAAC;QAC9B,UAAU,EAAE,KAAK,IAAI,OAAO,IAAI,UAAU,EAAE;YAC1C,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;YACtC,IAAI,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;YACpC,IAAI,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAChE,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE;gBAC7B,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,SAAS,UAAU,CAAC;aACrB;YAED,aAAa,EAAE,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE;gBAC/C,IAAI,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;gBACzC,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;oBAAE,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACzD,eAAe,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gBACpE,SAAS,aAAa,CAAC;aACxB;SACF;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAEO,8BAA8B,CACpC,aAA+C,EAC/C,OAAe;QAEf,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YAC3B,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;SAC7B;IACH,CAAC;CACF;AA/QD,oCA+QC","sourcesContent":["import jp from \"jsonpath\";\n\ntype MessageNode = { [segment: string]: string[] };\ntype MessageWithFieldNode = {\n  [segment: string]: {\n    [field: string]: string | { [repeatedFieldInd: string]: string };\n  };\n};\ntype MessageWithFieldAndComponentNode = {\n  [segment: string]: {\n    [field: string]:\n      | string\n      | {\n          [repeatedFieldInd: string]:\n            | string\n            | {\n                [component: string]:\n                  | string\n                  | string[]\n                  | { [sub: string]: string };\n              };\n        }\n      | { [component: string]: string | string[] | { [sub: string]: string } };\n  };\n};\n\nexport class HL7v2Message {\n  readonly raw: string;\n  readonly fieldDelimiter: string;\n  readonly componentDelimiter: string;\n  readonly repeatingFieldDelimiter: string;\n  readonly escapeCharacter: string;\n  readonly subComponentDelimiter: string;\n\n  message: MessageWithFieldAndComponentNode;\n\n  readonly MSH_SEGMENT: string;\n  readonly DATA_SEGMENTS: string[];\n\n  constructor(raw: string) {\n    this.raw = raw;\n    this.message = {};\n    let segments = raw.split(\"\\r\");\n    let MSH_SEGMENT = segments.shift();\n    if (!MSH_SEGMENT) throw new Error(\"MSH Segment is Falsy\");\n    this.MSH_SEGMENT = MSH_SEGMENT;\n    this.DATA_SEGMENTS = segments;\n    this.fieldDelimiter = MSH_SEGMENT[3];\n    this.componentDelimiter = MSH_SEGMENT[4];\n    this.repeatingFieldDelimiter = MSH_SEGMENT[5];\n    this.escapeCharacter = MSH_SEGMENT[6];\n    this.subComponentDelimiter = MSH_SEGMENT[7];\n    this.parse();\n  }\n\n  get(path: string) {\n    return jp.query(this.message, path);\n  }\n\n  parse() {\n    const MSH_SEGMENT = this.parseMSH();\n    const parsedSegments = this.parseSegments(this.DATA_SEGMENTS);\n    //this.segmentsParsed = parsedSegments;\n    const parsedRepeatedField = this.parseRepeatingFields(parsedSegments);\n    //this.repeatedParsed = parsedRepeatedField;\n    let parsedMessage: MessageWithFieldAndComponentNode = {\n      MSH: MSH_SEGMENT[\"MSH\"],\n    };\n    const parsedComponents = this.parseComponents(parsedRepeatedField);\n\n    this.message = { ...parsedMessage, ...parsedComponents };\n    return this.message;\n  }\n\n  private parseMSH() {\n    const segments = this.parseSegments([this.MSH_SEGMENT]);\n    const parseRepeatedField = this.parseRepeatingFields(segments);\n    let components = this.parseComponents(parseRepeatedField);\n    // re-write this field because the parsing will be incorrect;\n    components[\"MSH\"][0] = this.MSH_SEGMENT.substring(3, 8);\n    return components;\n  }\n\n  private replaceEscape(str: string): string {\n    return str\n      .replace(\"\\\\F\", \"|\")\n      .replace(\"\\\\R\", \"~\")\n      .replace(\"\\\\S\", \"^\")\n      .replace(\"\\\\T\", \"&\")\n      .replace(\"\\\\E\", \"\\\\\");\n  }\n\n  /**\n   *\n   * @param segments Array of Segments\n   * @returns an object with headers as keys and values of fields\n   */\n  private parseSegments(segments: string[]): MessageNode {\n    let obj: MessageNode = {};\n    for (let ind in segments) {\n      let segment = segments[ind];\n      let fields = segment\n        .split(this.fieldDelimiter)\n        // remove any line feed\n        .map((v) => v.replace(/\\n/, \"\"));\n      let header = fields.shift();\n      if (!header) throw new Error(\"No Header\");\n      // some segments can appear multiple times so we append the Sequence Field\n      // PV1.1 when parsing into a JSON object\n      switch (header) {\n        case \"AIG\":\n        case \"AIL\":\n        case \"AIP\":\n        case \"AIS\":\n        case \"AL1\":\n        case \"CM0\":\n        case \"CM1\":\n        case \"CM2\":\n        case \"DB1\":\n        case \"DG1\":\n        case \"DSP\":\n        case \"FT1\":\n        case \"GT1\":\n        case \"IN1\":\n        case \"IN3\":\n        case \"NK1\":\n        case \"NTE\":\n        case \"OBR\":\n        case \"OBX\":\n        case \"PID\":\n        case \"PR1\":\n        case \"PV1\":\n        case \"RGS\":\n        case \"RQD\":\n        case \"TXA\":\n        case \"UB1\":\n        case \"UB2\":\n          // set based on sequence field or if omitted set to 1;\n          header = `${header}.${fields[0] ?? \"1\"}`;\n          break;\n        default:\n          break;\n      }\n      // in the event the header already already exists will append [index] 1-based\n      if (obj[header]) {\n        let incrementingHeader = header;\n        let index = 1;\n        while (true) {\n          incrementingHeader = `${header}[${index}]`;\n\n          if (\n            !Object.entries(obj)\n              .map((v) => v[0])\n              .includes(incrementingHeader)\n          )\n            break;\n          index = index + 1;\n        }\n        header = incrementingHeader;\n      }\n      obj[header] = fields;\n      continue;\n    }\n    return obj;\n  }\n\n  /**\n   *\n   * @param messageNode The message node to parse over it's keys\n   * @returns\n   */\n  private parseRepeatingFields(messageNode: MessageNode): MessageWithFieldNode {\n    let obj: MessageWithFieldNode = {};\n    fields: for (let [segment, fields] of Object.entries(messageNode)) {\n      field: for (let fieldInd in fields) {\n        let fieldIndex = parseInt(fieldInd, 10) + 1;\n        let field = fields[fieldInd];\n        if (!obj[segment]) {\n          obj[segment] = {};\n        }\n        let repeatedFields = field.split(this.repeatingFieldDelimiter);\n        if (repeatedFields.length <= 1) {\n          // No repeating fields\n          obj[segment][fieldIndex] = repeatedFields[0];\n          continue;\n        }\n        let repeatedObject: { [ind: string]: string } = {};\n        for (let repeatInd in repeatedFields) {\n          let index = parseInt(repeatInd, 10) + 1;\n          let fieldValue = repeatedFields[repeatInd];\n\n          repeatedObject[index] = fieldValue;\n        }\n\n        obj[segment][fieldIndex] = repeatedObject;\n      }\n    }\n    return obj;\n  }\n\n  parseComponents(\n    fieldNode: MessageWithFieldNode\n  ): MessageWithFieldAndComponentNode {\n    let componentNode: MessageWithFieldAndComponentNode = {};\n    // iterate through the segments\n    segment: for (let [segment, fields] of Object.entries(fieldNode)) {\n      this.initializeComponentNodeSegment(componentNode, segment);\n      if (typeof fields === \"string\") {\n        componentNode[segment] = fields;\n        continue;\n      }\n      fields: for (let [outerInd, field] of Object.entries(fields)) {\n        if (typeof field !== \"string\") {\n          repeat: for (let [ind, repeat] of Object.entries(field)) {\n            let components = repeat.split(this.componentDelimiter);\n            this.initializeFieldObject(componentNode, segment, outerInd);\n            if (components.length <= 1) {\n              if (ind) {\n                // @ts-ignore\n                componentNode[segment][outerInd][ind] = this.replaceEscape(\n                  components[0]\n                );\n                continue;\n              }\n              componentNode[segment][outerInd] = this.replaceEscape(\n                components[0]\n              );\n\n              continue;\n            }\n            let componentObject = this.toComplexComponentObject(components);\n\n            if (ind) {\n              // @ts-ignore\n              componentNode[segment][outerInd][ind] = componentObject;\n              continue;\n            }\n            componentNode[segment][outerInd] = componentObject;\n            continue;\n          }\n          continue fields;\n        }\n\n        // field is a string\n        let components = field.split(this.componentDelimiter);\n        this.initializeFieldObject(componentNode, segment, outerInd);\n        if (components.length <= 1) {\n          componentNode[segment][outerInd] = this.replaceEscape(components[0]);\n          continue;\n        }\n        let componentObject = this.toComplexComponentObject(components);\n        componentNode[segment][outerInd] = componentObject;\n      }\n    }\n    return componentNode;\n  }\n\n  private initializeFieldObject(\n    componentNode: MessageWithFieldAndComponentNode,\n    segment: string,\n    outerInd: string\n  ) {\n    if (!componentNode[segment][outerInd]) {\n      componentNode[segment][outerInd] = {};\n    }\n  }\n\n  private toComplexComponentObject(components: string[]) {\n    let componentObject: any = {};\n    components: for (let compInd in components) {\n      let index = parseInt(compInd, 10) + 1;\n      let component = components[compInd];\n      let subComponents = component.split(this.subComponentDelimiter);\n      if (subComponents.length <= 1) {\n        componentObject[index] = this.replaceEscape(subComponents[0]);\n        continue components;\n      }\n\n      subComponents: for (let subInd in subComponents) {\n        let subComponent = subComponents[subInd];\n        let subIndex = parseInt(subInd, 10) + 1;\n        if (!componentObject[index]) componentObject[index] = {};\n        componentObject[index][subIndex] = this.replaceEscape(subComponent);\n        continue subComponents;\n      }\n    }\n    return componentObject;\n  }\n\n  private initializeComponentNodeSegment(\n    componentNode: MessageWithFieldAndComponentNode,\n    segment: string\n  ) {\n    if (!componentNode[segment]) {\n      componentNode[segment] = {};\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e1e1e87eb61c95ab15bce5a4f60accd00d83ac10","contentHash":"3d672fad75137df018a2a3c66cad5bf0078659be5ee9151256cd9c6a58fc2bb0"}}